{"version":3,"sources":["images/music-bg.svg","images/google.svg","components/GlobalState.js","apis/SuggestSearch.js","components/header/AutoSearchResult.js","apis/youtubeSearch.js","components/header/SearchBox.js","components/header/SimpleAppBar.js","components/HomePage.js","components/header/SearchResult.js","components/CurrentSection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GlobalContex","createContext","GlobalState","props","useState","searchState","setSearchState","searchResult","setSearchResult","currentVideoId","setCurrentVideoId","Provider","value","children","axios","create","baseURL","params","hl","ds","client","AutoSearchResult","results","onSearchSelect","renderResult","map","result","ind","ListItem","key","onClick","button","ListItemIcon","style","paddingLeft","marginRight","ListItemText","primary","List","marginTop","part","videoCategoryId","type","SearchBox","useContext","searchQuery","setSearchQuery","autoSearchData","setAutoSearch","ytSearchQuery","setYtSearchQuery","isPoperOpen","setPopper","getAutocomplete","a","suggestSearch","get","q","res","searchSuggestions","data","split","forEach","ele","index","push","useEffect","youtubeSearch","items","searchYt","popperResult","Grid","height","container","justify","alignItems","CircularProgress","IconButton","color","aria-label","onSubmit","e","preventDefault","onSearchSubmit","width","InputBase","fullWidth","placeholder","autoFocus","onChange","target","Popper","background","open","placement","anchorEl","document","getElementById","useStyles","makeStyles","theme","root","flexGrow","menuButton","spacing","title","display","textAlign","breakpoints","up","HideOnScroll","trigger","useScrollTrigger","Slide","appear","direction","in","SimpleAppBar","classes","className","AppBar","position","id","Toolbar","edge","Typography","variant","noWrap","aria-level","bgStyle","bgImg","backgroundPositionX","craftedStyle","fontFamily","fontSize","letterSpacing","HomePage","showLogin","isSearchOpen","Button","src","gIcon","alt","Entities","require","XmlEntities","SearchResult","renderResults","videos","video","snippet","videoId","ListItemAvatar","Avatar","thumbnails","default","url","secondary","component","channelTitle","Divider","CurrentSection","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,gLCE9BC,EAAeC,0BAkBbC,MAhBf,SAAqBC,GAAQ,IAAD,EAEaC,mBAAS,QAFtB,mBAEjBC,EAFiB,KAELC,EAFK,OAGeF,mBAAS,MAHxB,mBAGjBG,EAHiB,KAGJC,EAHI,OAImBJ,mBAAS,MAJ5B,mBAIjBK,EAJiB,KAIFC,EAJE,KAMxB,OACI,kBAACV,EAAaW,SAAd,CACAC,MAAO,CAAEP,cAAYC,iBAAeC,eAAaC,kBAAgBC,iBAAeC,sBAE3EP,EAAMU,W,uMCVJC,MAAMC,OAAO,CAC1BC,QAAS,yFAKTC,OAAQ,CACNC,GAAI,KACJC,GAAI,KACJC,OAAQ,a,oCCUGC,MAnBf,YAAqD,IAA1BC,EAAyB,EAAzBA,QAAQC,EAAiB,EAAjBA,eAC3BC,EAAe,GAWnB,OAVGF,IACCE,EAAeF,EAAQG,KAAI,SAACC,EAAOC,GAAR,OACvB,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAKG,QAAS,kBAAIP,EAAeG,IAASK,QAAM,GAC3D,kBAACC,EAAA,EAAD,CAAcC,MAAO,CAAEC,YAAY,OAAOC,YAAY,QAClD,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAASX,SAK/B,kBAACY,EAAA,EAAD,CAAML,MAAO,CAAEM,UAAU,SACpBf,ICNEV,MAAMC,OAAO,CAC1BC,QAAS,wCACTC,OAAQ,CACNuB,KAAM,UACNC,gBAAiB,KACjBC,KAAM,QAENb,IAAI,6CCkGOc,MA3Gf,WAAsB,IAAD,EAEoCC,qBAAW5C,GAAzDK,EAFU,EAEVA,YAAYG,EAFF,EAEEA,gBAAgBF,EAFlB,EAEkBA,eAFlB,EAIoBF,mBAAS,IAJ7B,mBAIVyC,EAJU,KAIEC,EAJF,OAKsB1C,mBAAS,IAL/B,mBAKV2C,EALU,KAKKC,EALL,OAMwB5C,mBAAS,MANjC,mBAMV6C,EANU,KAMIC,EANJ,OAQe9C,oBAAS,GARxB,mBAQV+C,EARU,KAQEC,EARF,KAWX7B,EAAiB,SAAAG,GACnBwB,EAAiBxB,GACjBoB,EAAepB,GAEfpB,EAAe,cAYb+C,EAAe,uCAAG,8BAAAC,EAAA,sEACFC,EAAcC,IAAI,GAAG,CACnCvC,OAAO,CACHwC,EAAGZ,KAHS,OACda,EADc,OAOdC,EAAoB,GAC1BD,EAAIE,KAAKC,MAAM,KAAKC,SAAQ,SAACC,EAAKC,GAC7BD,EAAIF,MAAM,KAAK,IAAgB,IAAVG,IACtBL,EAAkBM,KAAKF,EAAIF,MAAM,KAAK,IACtCb,EAAcW,OAXE,2CAAH,qDAwBrBO,qBAAU,WAWHjB,GAAmC,KAAlBA,GAVN,uCAAG,WAAMW,GAAN,eAAAN,EAAA,sEACKa,EAAcX,IAAI,UAAU,CAC1CvC,OAAO,CACHwC,EAAEG,KAHG,OACPF,EADO,OAMblD,EAAgBkD,EAAIE,KAAKQ,OACzB9D,EAAe,aAPF,2CAAH,qDAWV+D,CAASpB,KAEf,CAACA,IAGH,IAAMqB,EAAe,WACjB,OAAOjE,GACH,IAAK,YACD,OACI,kBAACkE,EAAA,EAAD,CAAMtC,MAAO,CAAEuC,OAAO,SAAUC,WAAS,EAACC,QAAQ,SAASC,WAAW,UAClE,kBAACC,EAAA,EAAD,OAGZ,IAAK,UACD,OACI,kBAAC,EAAD,CAAkBtD,QAASyB,EAAgBxB,eAAgBA,IAEnE,IAAK,YACD6B,GAAU,KAOtB,OACI,6BACI,kBAACyB,EAAA,EAAD,CAAY/C,QAAS,kBAAIxB,EAAe,SAASwE,MAAM,UAAUC,aAAW,QACxE,kBAAC,IAAD,OAEJ,0BAAMC,SAAU,SAAAC,GAAC,OAjDF,SAAAA,GACnBA,EAAEC,iBACF5E,EAAe,aACf4C,EAAiBL,GA8CQsC,CAAeF,IAAIhD,MAAO,CAAEmD,MAAO,SACpD,kBAACC,EAAA,EAAD,CAAWC,WAAS,EAACC,YAAY,YAAYC,WAAS,EAACvD,MAAO,CAAE6C,MAAM,OAAO5C,YAAY,QAAStB,MAAOiC,EAAa4C,SAzElH,SAAAR,GACZnC,EAAemC,EAAES,OAAO9E,OACxByC,KAuEiJvB,QAAS,WAC9IxB,EAAe,WACf8C,GAAU,OAGlB,kBAACuC,EAAA,EAAD,CAAQ1D,MAAO,CAAEmD,MAAM,OAAOZ,OAAO,OAAOoB,WAAW,QAASC,KAAM1C,EAAa2C,UAAU,SAC7FC,SAAUC,SAASC,eAAe,WAC9B3B,KCxGV4B,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVpE,YAAaiE,EAAMI,QAAQ,IAE7BC,MAAM,aACJH,SAAU,EACVI,QAAS,OACTC,UAAU,UACTP,EAAMQ,YAAYC,GAAG,MAAQ,CAC5BH,QAAS,cAMf,SAASI,EAAc3G,GAAQ,IACpBU,EAAYV,EAAZU,SACDkG,EAAUC,cAChB,OACI,kBAACC,EAAA,EAAD,CAAOC,QAAQ,EAAOC,UAAU,OAAOC,IAAKL,GACvClG,GA+CAwG,MA3CZ,SAAsBlH,GACrB,IAAMmH,EAAUpB,IADY,EAEStD,qBAAW5C,GAAzCK,EAFqB,EAErBA,YAAYC,EAFS,EAETA,eA2BnB,OACI,yBAAKiH,UAAWD,EAAQjB,MACpB,kBAACS,EAAiB3G,EACd,kBAACqH,EAAA,EAAD,CAAQC,SAAS,SAASC,GAAG,UACzB,kBAACC,EAAA,EAAD,KA5BO,SAAhBtH,EAEK,oCACA,kBAACwE,EAAA,EAAD,CACI+C,KAAK,QACLL,UAAWD,EAAQf,WACnBzB,MAAM,UACNC,aAAW,QACX,kBAAC,IAAD,OAEJ,kBAAC8C,EAAA,EAAD,CAAYN,UAAWD,EAAQb,MAAOqB,QAAQ,KAAKC,QAAM,GAAzD,gBAIA,kBAAClD,EAAA,EAAD,CAAYC,MAAM,UAAUkD,aAAW,SAASlG,QAAS,kBAAKxB,EAAe,aACzE,kBAAC,IAAD,QAKD,kBAAC,EAAD,W,2CCrDb2H,EAAU,CACZrC,WAAW,QAAD,OAASsC,IAAT,gBACVC,oBAAoB,MACpB5F,UAAW,OACX6C,MAAO,QACPZ,OAAQ,QAGN4D,EAAe,CACjBC,WAAY,iBACZC,SAAU,OACVlD,MAAO,OACPuB,UAAW,SACX4B,cAAe,EACfhG,UAAW,QAuBAiG,MArBf,WAAqB,IAEXC,EAAY,CACd/B,QAFmB9D,qBAAW5C,GAA3B0I,aAEqB,OAAO,SAEnC,OACI,yBAAKzG,MAAOwG,GACR,yBAAKxG,MAAOgG,IACZ,kBAAC1D,EAAA,EAAD,CAAME,WAAS,EAACC,QAAQ,UACpB,kBAACiE,EAAA,EAAD,CAAQb,QAAQ,WAAWhD,MAAM,WAC7B,yBAAK8D,IAAKC,IAAOrE,OAAO,OAAOvC,MAAO,CAAEE,YAAY,MAAO2G,IAAI,SADnE,2BAIJ,kBAACjB,EAAA,EAAD,CAAYC,QAAQ,QAAQhD,MAAM,UAAU7C,MAAOmG,GAAnD,0B,4BC9BK,IAAIW,EAFJC,EAAQ,IAAiBC,aAqC3BC,OAjCf,YAAiC,IACzBC,EADeC,EAAS,EAATA,OAAS,EAEcxG,qBAAW5C,GAA/BU,GAFM,EAErBD,eAFqB,EAENC,mBAwBtB,OAnBAyI,EAAgBC,EAAO3H,KAAI,SAAA4H,GACLA,EAAXC,QACP,OACI,yBAAKzH,IAAKwH,EAAM3B,GAAG6B,SACf,kBAAC3H,EAAA,EAAD,CAAU+C,WAAW,aAAa5C,QAAM,EAACD,QAAS,kBAP1C4F,EAO0D2B,EAAM3B,GAAG6B,aANnF7I,EAAkBgH,GADF,IAAAA,IAQJ,kBAAC8B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQxH,MAAO,CAAEmD,MAAM,OAAQZ,OAAO,QACtCsE,IAAKO,EAAMC,QAAQ7C,MAAOmC,IAAKS,EAAMC,QAAQI,WAAWC,QAAQC,OAEpE,kBAACxH,EAAA,EAAD,CAAcC,QAASgH,EAAMC,QAAQ7C,MAAOoD,UACxC,kBAAChC,EAAA,EAAD,CAAYiC,UAAU,OAAOhC,QAAQ,QAAQhD,MAAM,eAC9CuE,EAAMC,QAAQS,iBAI3B,kBAACC,GAAA,EAAD,UAKR,kBAAC1H,EAAA,EAAD,KACK6G,ICfEc,OAff,WAA2B,IAAD,EACarH,qBAAW5C,GAAvCK,EADe,EACfA,YAAYE,EADG,EACHA,aAEnB,MAAmB,SAAhBF,EACS,kBAAC,EAAD,MAEY,cAAhBA,EACI,kBAAC,GAAD,CAAc+I,OAAU7I,IAGhC,+BCIO2J,OAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,GAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEF1E,SAASC,eAAe,SDyHpB,kBAAmB0E,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e55852ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/music-bg.2a54ea04.svg\";","module.exports = __webpack_public_path__ + \"static/media/google.8fb2bc7a.svg\";","import React,{useState,createContext} from 'react';\r\n\r\nexport const GlobalContex = createContext();\r\n\r\nfunction GlobalState(props) {\r\n\r\n    const [searchState,setSearchState] = useState(\"home\");\r\n    const [searchResult,setSearchResult] = useState(null);\r\n    const [currentVideoId,setCurrentVideoId] = useState(null);\r\n\r\n    return (\r\n        <GlobalContex.Provider \r\n        value={{ searchState,setSearchState,searchResult,setSearchResult,currentVideoId,setCurrentVideoId}}>\r\n\r\n            {props.children}\r\n\r\n        </GlobalContex.Provider>\r\n    )\r\n}\r\n\r\nexport default GlobalState\r\n","import axios from \"axios\";\r\n// import jsonpAdapter from \"axios-jsonp\"\r\n\r\n// https://clients1.google.com/complete/search?client=youtube&gs_ri=youtube&ds=yt&q=faded\r\nexport default axios.create({\r\n  baseURL: \"https://cors-anywhere.herokuapp.com/https://suggestqueries.google.com/complete/search?\",\r\n  \r\n  // baseURL: \"https://suggestqueries.google.com/complete/search?\",\r\n  // adapter: jsonpAdapter,\r\n\r\n  params: {\r\n    hl: \"en\", // Language\r\n    ds: \"yt\", // Restrict lookup to youtube\r\n    client: \"youtube\", // force youtube style response, i.e. jsonp\r\n  }\r\n});\r\n","import React from 'react';\r\nimport {List,ListItem,ListItemIcon,ListItemText} from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nfunction AutoSearchResult({results,onSearchSelect}) {\r\n    let renderResult = [];\r\n    if(results){\r\n        renderResult = results.map((result,ind)=>(\r\n            <ListItem key={ind} onClick={()=>onSearchSelect(result)} button>\r\n                <ListItemIcon style={{ paddingLeft:\"16px\",marginRight:\"9px\"}}>\r\n                    <SearchIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary={result} />\r\n            </ListItem>           \r\n        ))\r\n    }\r\n    return (\r\n        <List style={{ marginTop:\"12px\" }}>\r\n            {renderResult}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default AutoSearchResult\r\n","import axios from \"axios\";\r\n\r\n// put your api keys in .env file you can get those here - https://developers.google.com/youtube/v3/getting-started\r\n\r\nexport const selectRandomKey = () => {\r\n  const keys = process.env.REACT_APP_YouTube_Keys.split(\" \"); //we are splitting the api keys to make an array\r\n  const random = Math.floor(Math.random() * Math.floor(keys.length)); //this will get a random number\r\n  return keys[random];\r\n};\r\n// https://cors-anywhere.herokuapp.com/\r\n\r\n// create axios object\r\nexport default axios.create({\r\n  baseURL: \"https://www.googleapis.com/youtube/v3\",\r\n  params: {\r\n    part: \"snippet\",\r\n    videoCategoryId: \"15\",\r\n    type: \"video\",\r\n    // key: selectRandomKey()\r\n    key:\"AIzaSyCHhmQByh7jiD45NTShA6kF2KEjk-tZSPw\" //youtube api key\r\n  }\r\n});\r\n","import React,{useContext,useState,useEffect} from 'react';\r\nimport {InputBase,IconButton,Popper,CircularProgress,Grid} from '@material-ui/core';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { GlobalContex } from \"../GlobalState\";\r\nimport suggestSearch from \"../../apis/SuggestSearch\";\r\nimport AutoSearchResult from \"./AutoSearchResult\";\r\nimport youtubeSearch from \"../../apis/youtubeSearch\";\r\n\r\n// let ytValue;\r\n\r\nfunction SearchBox() {\r\n\r\n    const {searchState,setSearchResult,setSearchState} = useContext(GlobalContex);\r\n\r\n    const [searchQuery,setSearchQuery] = useState(\"\");\r\n    const [autoSearchData,setAutoSearch] = useState(\"\");\r\n    const [ytSearchQuery,setYtSearchQuery] = useState(null);\r\n    // const [ytSearchData,setYtSearch] = useState([]);\r\n    const [isPoperOpen,setPopper] = useState(true);\r\n\r\n    // get back the selected search data\r\n    const onSearchSelect = result =>{\r\n        setYtSearchQuery(result);\r\n        setSearchQuery(result);\r\n        //when user selects then search on youtube\r\n        setSearchState(\"searching\");\r\n    }\r\n\r\n    const userSearched = () =>{\r\n        setYtSearchQuery(searchQuery);\r\n    }\r\n    const onTyped = e =>{\r\n        setSearchQuery(e.target.value);\r\n        getAutocomplete();\r\n    }\r\n\r\n    // get autoComplete data from api\r\n    const getAutocomplete = async ()=>{\r\n        const res = await suggestSearch.get(\"\",{\r\n            params:{\r\n                q: searchQuery\r\n            }\r\n        })\r\n        // extract data\r\n        const searchSuggestions = [];\r\n        res.data.split('[').forEach((ele, index) => {\r\n        if (!ele.split('\"')[1] || index === 1) return;\r\n            searchSuggestions.push(ele.split('\"')[1]);\r\n            setAutoSearch(searchSuggestions);\r\n        });\r\n        // console.log( autoSearchData)\r\n    }\r\n    \r\n\r\n    const onSearchSubmit = e =>{\r\n        e.preventDefault();\r\n        setSearchState(\"searching\");\r\n        setYtSearchQuery(searchQuery);\r\n    }\r\n\r\n    // get youtube search result from api\r\n    useEffect(()=>{\r\n        const searchYt = async data =>{\r\n            const res = await youtubeSearch.get(\"/search\",{\r\n                params:{\r\n                    q:data\r\n                }\r\n            })\r\n            setSearchResult(res.data.items);\r\n            setSearchState(\"completed\");\r\n        }\r\n        // only search if there is any value\r\n        if(ytSearchQuery && ytSearchQuery !== ''){\r\n            searchYt(ytSearchQuery);\r\n        }\r\n    },[ytSearchQuery]);\r\n\r\n    // show loading icon while we fetch the results from api\r\n    const popperResult = () =>{\r\n        switch(searchState){\r\n            case \"searching\":\r\n                return (\r\n                    <Grid style={{ height:\"100vh\"}} container justify=\"center\" alignItems=\"center\">\r\n                        <CircularProgress />\r\n                    </Grid>\r\n                );\r\n            case \"clicked\":\r\n                return (\r\n                    <AutoSearchResult results={autoSearchData} onSearchSelect={onSearchSelect} />\r\n                );\r\n            case \"completed\":\r\n                setPopper(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <IconButton onClick={()=>setSearchState(\"home\")} color=\"inherit\" aria-label=\"Menu\">\r\n                <ArrowBackIcon />\r\n            </IconButton>\r\n            <form onSubmit={e => onSearchSubmit(e)} style={{ width: \"100%\" }}>\r\n                <InputBase fullWidth placeholder=\"Search...\" autoFocus style={{ color:\"#fff\",paddingLeft:\"16px\"}} value={searchQuery} onChange={onTyped} onClick={()=>{\r\n                    setSearchState(\"clicked\");\r\n                    setPopper(true);\r\n                }}/>\r\n            </form>\r\n            <Popper style={{ width:\"100%\",height:\"100%\",background:\"#fff\"}} open={isPoperOpen} placement=\"bottom\"\r\n            anchorEl={document.getElementById(\"navbar\")}>\r\n               {popperResult}\r\n            </Popper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React,{useContext} from 'react'\r\nimport {GlobalContex} from '../GlobalState';\r\nimport { makeStyles,AppBar,Toolbar,IconButton,Typography,useScrollTrigger, Slide} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SearchBox from './SearchBox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: 'none',\r\n      textAlign:\"center\",\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    \r\n  }));\r\n\r\n  function HideOnScroll (props) {\r\n      const {children} = props;\r\n      const trigger = useScrollTrigger();\r\n      return (\r\n          <Slide appear={false} direction=\"down\" in={!trigger}>\r\n              {children}\r\n          </Slide>\r\n      )\r\n  }\r\n   function SimpleAppBar(props) {\r\n    const classes = useStyles();\r\n    const {searchState,setSearchState} = useContext(GlobalContex);\r\n\r\n    const toggleSearch = () =>{\r\n        if(searchState === \"home\"){\r\n            return(\r\n                <>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"Menu\">\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                Ylight Music\r\n                </Typography>\r\n                \r\n                <IconButton color=\"inherit\" aria-level=\"Search\" onClick={()=> setSearchState(\"clicked\")}>\r\n                    <SearchIcon />\r\n                </IconButton>\r\n                </>\r\n            )\r\n        }else{\r\n            return <SearchBox />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <HideOnScroll {...props}>\r\n                <AppBar position=\"sticky\" id=\"navbar\">\r\n                    <Toolbar>\r\n                    {toggleSearch()}\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </HideOnScroll>\r\n        </div>\r\n    )\r\n}\r\n\r\n// export default withStyles(styles)(SimpleAppBar);\r\nexport default SimpleAppBar;\r\n ","import React,{useContext} from 'react'\r\nimport {Button,Grid, Typography} from '@material-ui/core';\r\nimport {GlobalContex} from './GlobalState'\r\nimport bgImg from \"../images/music-bg.svg\";\r\nimport gIcon from \"../images/google.svg\";\r\n\r\nconst bgStyle = {\r\n    background:`url('${bgImg}') no-repeat`,\r\n    backgroundPositionX:'50%',\r\n    marginTop: \"50px\",\r\n    width: \"100vw\",\r\n    height: \"55vh\"\r\n    \r\n}\r\nconst craftedStyle = {\r\n    fontFamily: \"Vibur, cursive\",\r\n    fontSize: \"24px\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    letterSpacing: 0,\r\n    marginTop: \"40px\"\r\n  };\r\nfunction HomePage() {\r\n    const {isSearchOpen} = useContext(GlobalContex);\r\n    const showLogin = {\r\n        display: isSearchOpen ? \"none\":\"block\"\r\n    }\r\n    return (\r\n        <div style={showLogin}>\r\n            <div style={bgStyle} />\r\n            <Grid container justify=\"center\">\r\n                <Button variant=\"outlined\" color=\"primary\">\r\n                    <img src={gIcon} height=\"25px\" style={{ marginRight:\"px\"}} alt=\"Home\"/>Sign In to Personalize\r\n                </Button>\r\n            </Grid>\r\n            <Typography variant=\"body1\" color=\"primary\" style={craftedStyle}>\r\n                HandCrafted by Nahid\r\n            </Typography>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React,{useContext} from 'react';\r\nimport {List,ListItem,ListItemText, ListItemAvatar, Avatar, Typography, Divider} from \"@material-ui/core\";\r\nimport { GlobalContex } from '../GlobalState';\r\nconst Entities = require(\"html-entities\").XmlEntities;\r\n\r\nconst entities = new Entities();\r\n\r\nfunction SearchResult({videos}) {\r\n    let renderResults = \"<div>Loading</div>\";\r\n    const {currentVideoId,setCurrentVideoId} =useContext(GlobalContex);\r\n\r\n    const handleClick = id => {\r\n        setCurrentVideoId(id)\r\n    }\r\n    renderResults = videos.map(video =>{\r\n        const {snippet} = video;\r\n        return(\r\n            <div key={video.id.videoId}>\r\n                <ListItem alignItems=\"flex-start\" button onClick={()=>handleClick(video.id.videoId)}>\r\n                    <ListItemAvatar>\r\n                        <Avatar style={{ width:\"60px\", height:\"60px\"}}\r\n                        alt={video.snippet.title} src={video.snippet.thumbnails.default.url} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary={video.snippet.title} secondary={\r\n                        <Typography component=\"span\" variant=\"body2\" color=\"textPrimary\">\r\n                            {video.snippet.channelTitle}\r\n                        </Typography>\r\n                    } />\r\n                </ListItem>\r\n                <Divider />\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <List>\r\n            {renderResults}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default SearchResult\r\n","import React,{useContext} from 'react'\r\nimport HomePage from './HomePage';\r\nimport {GlobalContex} from './GlobalState';\r\nimport SearchResult from './header/SearchResult';\r\n\r\nfunction CurrentSection() {\r\n    const {searchState,searchResult} = useContext(GlobalContex);\r\n\r\n    if(searchState === \"home\"){\r\n        return( <HomePage /> )\r\n    }\r\n    else if(searchState === \"completed\"){\r\n        return (<SearchResult videos = {searchResult} />)\r\n    }else{\r\n    return (\r\n        <div></div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default CurrentSection\r\n","import React from 'react';\nimport './App.css';\n// import LoginPage from './components/HomePage';\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { pink } from \"@material-ui/core/colors\";\nimport GlobalState from './components/GlobalState'\nimport SimpleAppBar from './components/header/SimpleAppBar';\nimport CurrentSection from './components/CurrentSection';\n\nfunction App() {\n  return (\n    <GlobalState>\n      <SimpleAppBar />\n      <CurrentSection />\n      {/* <LoginPage /> */}\n    </GlobalState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}