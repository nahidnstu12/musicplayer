{"version":3,"sources":["components/GlobalState.js","apis/youtubeSearch.js","components/header/SearchBox.js","components/header/SimpleAppBar.js","components/HomePage.js","components/header/SearchResult.js","components/CurrentSection.js","components/player/MainPlayer.js","App.js","serviceWorker.js","index.js","images/music-bg.svg","images/google.svg"],"names":["GlobalContex","createContext","GlobalState","props","useState","searchState","setSearchState","searchResult","setSearchResult","currentVideoSnippet","setCurrentVideoSnippet","Provider","value","children","axios","create","baseURL","params","part","videoCategoryId","type","key","SearchBox","useContext","searchQuery","setSearchQuery","ytSearchQuery","setYtSearchQuery","isPoperOpen","setPopper","useEffect","data","a","youtubeSearch","get","q","res","items","searchYt","popperResult","Grid","style","height","container","justify","alignItems","CircularProgress","IconButton","onClick","color","aria-label","onSubmit","e","preventDefault","onSearchSubmit","width","InputBase","fullWidth","placeholder","autoFocus","paddingLeft","onChange","target","Popper","background","open","placement","anchorEl","document","getElementById","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","textAlign","breakpoints","up","HideOnScroll","trigger","useScrollTrigger","Slide","appear","direction","in","SimpleAppBar","classes","className","AppBar","position","id","Toolbar","edge","Typography","variant","noWrap","aria-level","bgStyle","bgImg","backgroundPositionX","marginTop","craftedStyle","fontFamily","fontSize","letterSpacing","HomePage","showLogin","isSearchOpen","Button","src","gIcon","alt","entities","Entities","require","XmlEntities","SearchResult","renderResults","videos","map","video","snippet","videoId","ListItem","button","decode","channelTitle","maxThumbnail","hqThumbnail","handleClick","ListItemAvatar","Avatar","thumbnails","high","url","ListItemText","marginLeft","primary","secondary","component","Divider","List","CurrentSection","MainPlayer","setPlayer","top","right","opacity","paddingTop","opts","playerBars","autoplay","onReady","App","createMuiTheme","palette","green","typography","useNextVariants","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.825811d9.chunk.js","sourcesContent":["import React,{useState,createContext} from 'react';\r\n\r\nexport const GlobalContex = createContext();\r\n\r\nfunction GlobalState(props) {\r\n\r\n    const [searchState,setSearchState] = useState(\"home\");\r\n    const [searchResult,setSearchResult] = useState(null);\r\n    const [currentVideoSnippet,setCurrentVideoSnippet] = useState({});\r\n\r\n    return (\r\n        <GlobalContex.Provider \r\n        value={{ searchState,setSearchState,searchResult,setSearchResult,currentVideoSnippet,setCurrentVideoSnippet}}>\r\n            {props.children}\r\n        </GlobalContex.Provider>\r\n    )\r\n}\r\n\r\nexport default GlobalState\r\n","import axios from \"axios\";\r\n\r\n// put your api keys in .env file you can get those here - https://developers.google.com/youtube/v3/getting-started\r\n\r\nexport const selectRandomKey = () => {\r\n  const keys = process.env.REACT_APP_YouTube_Keys.split(\" \"); //we are splitting the api keys to make an array\r\n  const random = Math.floor(Math.random() * Math.floor(keys.length)); //this will get a random number\r\n  return keys[random];\r\n};\r\n// https://cors-anywhere.herokuapp.com/\r\n\r\n// create axios object\r\nexport default axios.create({\r\n  baseURL: \"https://cors-anywhere.herokuapp.com/https://www.googleapis.com/youtube/v3\",\r\n  params: {\r\n    part: \"snippet\",\r\n    videoCategoryId: \"10\",\r\n    type: \"video\",\r\n    // key: selectRandomKey()\r\n    // key:\"AIzaSyCHhmQByh7jiD45NTShA6kF2KEjk-tZSPw\" //youtube api key\r\n    key:\"AIzaSyBCqukaH8emuZ33VWrD6LmaJI7TFClqutY\" //2nd api key\r\n  }\r\n});\r\n","import React,{useContext,useState,useEffect} from 'react';\r\nimport {InputBase,IconButton,Popper,CircularProgress,Grid} from '@material-ui/core';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { GlobalContex } from \"../GlobalState\";\r\n// import suggestSearch from \"../../apis/SuggestSearch\";\r\n// import AutoSearchResult from \"./AutoSearchResult\";\r\nimport youtubeSearch from \"../../apis/youtubeSearch\";\r\n\r\n// let ytValue;\r\n\r\nfunction SearchBox() {\r\n\r\n    const {searchState,setSearchResult,setSearchState} = useContext(GlobalContex);\r\n\r\n    const [searchQuery,setSearchQuery] = useState(\"\");\r\n    // const [autoSearchData,setAutoSearch] = useState(\"\");\r\n    const [ytSearchQuery,setYtSearchQuery] = useState(null);\r\n    // const [ytSearchData,setYtSearch] = useState([]);\r\n    const [isPoperOpen,setPopper] = useState(true);\r\n\r\n    // **get back the selected search data**\r\n    // const onSearchSelect = result =>{\r\n    //     setYtSearchQuery(result);\r\n    //     setSearchQuery(result);\r\n    //     //when user selects then search on youtube\r\n    //     setSearchState(\"searching\");\r\n    // }\r\n\r\n    // const userSearched = () =>{\r\n    //     setYtSearchQuery(searchQuery);\r\n    // }\r\n    const onTyped = e =>{\r\n        setSearchQuery(e.target.value);\r\n        //getAutocomplete();\r\n    }\r\n\r\n    // **get autoComplete data from api**\r\n    // const getAutocomplete = async ()=>{\r\n    //     const res = await suggestSearch.get(\"\",{\r\n    //         params:{\r\n    //             q: searchQuery\r\n    //         }\r\n    //     })\r\n    //     // extract data\r\n    //     const searchSuggestions = [];\r\n    //     res.data.split('[').forEach((ele, index) => {\r\n    //     if (!ele.split('\"')[1] || index === 1) return;\r\n    //         searchSuggestions.push(ele.split('\"')[1]);\r\n    //         setAutoSearch(searchSuggestions);\r\n    //     });\r\n    //     // console.log( autoSearchData)\r\n    // }\r\n    \r\n\r\n    const onSearchSubmit = e =>{\r\n        e.preventDefault();\r\n        setSearchState(\"searching\");\r\n        setYtSearchQuery(searchQuery);\r\n    }\r\n\r\n    // get youtube search result from api\r\n    useEffect(()=>{\r\n        const searchYt = async data =>{\r\n            const res = await youtubeSearch.get(\"/search\",{\r\n                params:{\r\n                    q:data\r\n                }\r\n            })\r\n            setSearchResult(res.data.items);\r\n            setSearchState(\"completed\");\r\n        }\r\n        // only search if there is any value\r\n        if(ytSearchQuery && ytSearchQuery !== ''){\r\n            searchYt(ytSearchQuery);\r\n        }\r\n    },[ytSearchQuery,setSearchResult,setSearchState]);\r\n\r\n    // show loading icon while we fetch the results from api\r\n    const popperResult = () =>{\r\n        switch(searchState){\r\n            case \"searching\":\r\n                return (\r\n                    <Grid style={{ height:\"100vh\"}} container justify=\"center\" alignItems=\"center\">\r\n                        <CircularProgress />\r\n                    </Grid>\r\n                );\r\n            // case \"clicked\":\r\n            //     return (\r\n            //         <AutoSearchResult results={autoSearchData} onSearchSelect={onSearchSelect} />\r\n            //     );\r\n            case \"completed\":\r\n                setPopper(false);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <IconButton onClick={()=>setSearchState(\"home\")} color=\"inherit\" aria-label=\"Menu\">\r\n                <ArrowBackIcon />\r\n            </IconButton>\r\n            <form onSubmit={e => onSearchSubmit(e)} style={{ width: \"100%\" }}>\r\n                <InputBase fullWidth placeholder=\"Search...\" autoFocus style={{ color:\"#fff\",paddingLeft:\"16px\"}} value={searchQuery} onChange={onTyped} onClick={()=>{\r\n                    setSearchState(\"clicked\");\r\n                    setPopper(true);\r\n                }}/>\r\n            </form>\r\n            <Popper style={{ width:\"100%\",height:\"100%\",background:\"#fff\"}} open={isPoperOpen} placement=\"bottom\"\r\n            anchorEl={document.getElementById(\"navbar\")}>\r\n               {popperResult}\r\n            </Popper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox\r\n","import React,{useContext} from 'react'\r\nimport {GlobalContex} from '../GlobalState';\r\nimport { makeStyles,AppBar,Toolbar,IconButton,Typography,useScrollTrigger, Slide} from '@material-ui/core';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport SearchBox from './SearchBox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n      display: 'none',\r\n      textAlign:\"center\",\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    \r\n  }));\r\n\r\n  function HideOnScroll (props) {\r\n      const {children} = props;\r\n      const trigger = useScrollTrigger();\r\n      return (\r\n          <Slide appear={false} direction=\"down\" in={!trigger}>\r\n              {children}\r\n          </Slide>\r\n      )\r\n  }\r\n   function SimpleAppBar(props) {\r\n    const classes = useStyles();\r\n    const {searchState,setSearchState} = useContext(GlobalContex);\r\n\r\n    const toggleSearch = () =>{\r\n        if(searchState === \"home\"){\r\n            return(\r\n                <>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    className={classes.menuButton}\r\n                    color=\"inherit\"\r\n                    aria-label=\"Menu\">\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                Ylight Music\r\n                </Typography>\r\n                \r\n                <IconButton color=\"inherit\" aria-level=\"Search\" onClick={()=> setSearchState(\"clicked\")}>\r\n                    <SearchIcon />\r\n                </IconButton>\r\n                </>\r\n            )\r\n        }else{\r\n            return <SearchBox />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <HideOnScroll {...props}>\r\n                <AppBar position=\"sticky\" id=\"navbar\">\r\n                    <Toolbar>\r\n                    {toggleSearch()}\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </HideOnScroll>\r\n        </div>\r\n    )\r\n}\r\n\r\n// export default withStyles(styles)(SimpleAppBar);\r\nexport default SimpleAppBar;\r\n ","import React,{useContext} from 'react'\r\nimport {Button,Grid, Typography} from '@material-ui/core';\r\nimport {GlobalContex} from './GlobalState'\r\nimport bgImg from \"../images/music-bg.svg\";\r\nimport gIcon from \"../images/google.svg\";\r\n\r\nconst bgStyle = {\r\n    background:`url('${bgImg}') no-repeat`,\r\n    backgroundPositionX:'50%',\r\n    marginTop: \"50px\",\r\n    width: \"100vw\",\r\n    height: \"55vh\"\r\n    \r\n}\r\nconst craftedStyle = {\r\n    fontFamily: \"Vibur, cursive\",\r\n    fontSize: \"24px\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    letterSpacing: 0,\r\n    marginTop: \"40px\"\r\n  };\r\nfunction HomePage() {\r\n    const {isSearchOpen} = useContext(GlobalContex);\r\n    const showLogin = {\r\n        display: isSearchOpen ? \"none\":\"block\"\r\n    }\r\n    return (\r\n        <div style={showLogin}>\r\n            <div style={bgStyle} />\r\n            <Grid container justify=\"center\">\r\n                <Button variant=\"outlined\" color=\"primary\">\r\n                    <img src={gIcon} height=\"25px\" style={{ marginRight:\"px\"}} alt=\"Home\"/>Sign In to Personalize\r\n                </Button>\r\n            </Grid>\r\n            <Typography variant=\"body1\" color=\"primary\" style={craftedStyle}>\r\n                HandCrafted by Nahid\r\n            </Typography>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React,{useContext} from 'react';\r\nimport {List,ListItem,ListItemText, ListItemAvatar, Avatar, Typography, Divider} from \"@material-ui/core\";\r\nimport { GlobalContex } from '../GlobalState';\r\nconst Entities = require(\"html-entities\").XmlEntities;\r\n\r\nconst entities = new Entities();\r\n\r\nfunction SearchResult({videos}) {\r\n    let renderResults = \"<div>Loading</div>\";\r\n    const {currentVideoSnippet,setCurrentVideoSnippet} =useContext(GlobalContex);\r\n\r\n    const handleClick = video => {\r\n        // set all the info of current clicked video in this object\r\n        setCurrentVideoSnippet({\r\n            id: video.id.videoId,\r\n            title: entities.decode(video.snippet.title),\r\n            channelTitle: entities.decode(video.snippet.channelTitle),\r\n            maxThumbnail: `https://img.youtube.com/vi/${video.id.videoId}/maxresdefault.jpg`,\r\n            hqThumbnail:  `https://img.youtube.com/vi/${video.id.videoId}/hqdefault.jpg`\r\n        })\r\n    }\r\n    renderResults = videos.map(video =>{\r\n        const {snippet} = video;\r\n        return(\r\n            <div key={video.id.videoId}>\r\n                <ListItem alignItems=\"flex-start\" button onClick={()=>handleClick(video)}>\r\n                    <ListItemAvatar>\r\n                        <Avatar style={{ width:\"60px\", height:\"60px\"}}\r\n                        alt={video.snippet.title} src={video.snippet.thumbnails.high.url} />\r\n                    </ListItemAvatar>\r\n                    <ListItemText style={{ marginLeft:\"10px\"}} primary={video.snippet.title} secondary={\r\n                        <Typography component=\"span\" variant=\"body2\" color=\"textPrimary\">\r\n                            {video.snippet.channelTitle}\r\n                        </Typography>\r\n                    } />\r\n                </ListItem>\r\n                <Divider />\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <List>\r\n            {renderResults}\r\n        </List>\r\n    )\r\n}\r\n\r\nexport default SearchResult\r\n","import React,{useContext} from 'react'\r\nimport HomePage from './HomePage';\r\nimport {GlobalContex} from './GlobalState';\r\nimport SearchResult from './header/SearchResult';\r\n\r\nfunction CurrentSection() {\r\n    const {searchState,searchResult} = useContext(GlobalContex);\r\n\r\n    if(searchState === \"home\"){\r\n        return( <HomePage /> )\r\n    }\r\n    else if(searchState === \"completed\"){\r\n        return (<SearchResult videos = {searchResult} />)\r\n    }else{\r\n    return (\r\n        <div></div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default CurrentSection\r\n","import React,{useEffect,useContext,useState,useRef} from 'react'\r\nimport {GlobalContex} from '../GlobalState';\r\nimport Youtube from \"react-youtube\";\r\n\r\nfunction MainPlayer() {\r\n    const {currentVideoSnippet,setCurrentVideoSnippet} = useContext(GlobalContex);\r\n    const [player,setPlayer] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        if(currentVideoSnippet != null){\r\n            // player.loadVideoById(currentVideoId)\r\n            // playerStyle.display = \"none\";\r\n        }\r\n    },[currentVideoSnippet])\r\n\r\n    const opts = {\r\n        height:\"100%\",\r\n        width:\"100%\",\r\n        playerBars:{\r\n            autoplay:1\r\n        }\r\n    }\r\n    const playerStyle = {\r\n        position:\"absolute\",\r\n        top:0,\r\n        right:0,\r\n        height:\"100%\",\r\n        width:\"100%\",\r\n        opacity: \".5\",\r\n        paddingTop:\"50px\",\r\n        display:\"none\"\r\n    }\r\n    const onReady = e => {\r\n        setPlayer(e.target)\r\n    // e.target.loadVideoById(\"M7lc1UVf-VE\")\r\n}\r\n    return (\r\n        <div style={playerStyle}>\r\n            <Youtube opts={opts} onReady={onReady} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPlayer\r\n","import React from 'react';\nimport './App.css';\n// import LoginPage from './components/HomePage';\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { pink,green } from \"@material-ui/core/colors\";\nimport GlobalState from './components/GlobalState'\nimport SimpleAppBar from './components/header/SimpleAppBar';\nimport CurrentSection from './components/CurrentSection';\nimport MainPlayer from './components/player/MainPlayer';\n\nfunction App() {\n  const theme = createMuiTheme({\n\t  palette:{\n\t\t  primary:green\n\t  },\n\t  typography:{\n\t\t  useNextVariants:true\n\t  }\n  })\n  return (\n    <GlobalState>\n    <MuiThemeProvider theme={theme}>\n      <SimpleAppBar />\n      <CurrentSection />\n      {/* <LoginPage /> */}\n      <MainPlayer />\n      </MuiThemeProvider>\n    </GlobalState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/music-bg.2a54ea04.svg\";","module.exports = __webpack_public_path__ + \"static/media/google.8fb2bc7a.svg\";"],"sourceRoot":""}